import requests
from bs4 import BeautifulSoup
import telebot
import config as config
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import json
import logging
import traceback
import time
from telebot import apihelper
import os
from datetime import datetime

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
task = BackgroundScheduler()
bot = telebot.TeleBot(config.token)
users = set()

# –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
cache = {"date": "–î–∞—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "replacements": "–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç"}

logging.basicConfig(
    filename="/app/logs/bot_errors.log",
    level=logging.ERROR,
    format="%(asctime)s [%(levelname)s] %(message)s",
)



# –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['admin'])
def admin_menu(message):
    if message.chat.id != config.ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à"),
        types.KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        types.KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üìÇ –°–∫–∞—á–∞—Ç—å –ª–æ–≥"),
        types.KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        types.KeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
    )
    bot.send_message(message.chat.id, "‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.chat.id == config.ADMIN_ID)
def admin_commands(message):
    if message.text == "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        if not users:
            bot.send_message(message.chat.id, "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        else:
            text = "\n".join(str(uid) for uid in users)
            bot.send_message(message.chat.id, f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):\n{text}")

    elif message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à":
        update_cache()
        bot.send_message(message.chat.id, "‚úÖ –ö—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω –≤—Ä—É—á–Ω—É—é.")

    elif message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        users.clear()
        save_users()
        bot.send_message(message.chat.id, "üßπ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω.")

    elif message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"üóÇ –ö—ç—à –¥–∞—Ç—ã: {cache.get('date', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        )
        bot.send_message(message.chat.id, stats_text)

    elif message.text == "üìÇ –°–∫–∞—á–∞—Ç—å –ª–æ–≥":
        log_path = "/app/logs/bot_errors.log"
        if os.path.exists(log_path):
            with open(log_path, "rb") as log_file:
                bot.send_document(message.chat.id, log_file)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, broadcast_message)

    elif message.text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"))
        bot.send_message(message.chat.id, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)



def broadcast_message(message):
    if message.chat.id != config.ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    text = message.text.strip()
    count = 0
    failed = 0

    for user_id in users.copy():
        try:
            bot.send_message(user_id, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
            count += 1
            time.sleep(0.1)  # –∑–∞—â–∏—Ç–∞ –æ—Ç flood limit
        except Exception as e:
            failed += 1
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    bot.send_message(
        config.ADMIN_ID,
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüì® –£—Å–ø–µ—à–Ω–æ: {count}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {failed}"
    )

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def save_users():
    with open('users.json', "w", encoding="utf-8") as f:
        json.dump(list(users), f)


def load_users():
    global users
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = set(json.load(f))
    except FileNotFoundError:
        users = set()


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
def fetch_page():
    req = requests.get('https://mpt.ru/izmeneniya-v-raspisanii/').text
    return BeautifulSoup(req, 'lxml')


def get_replacements(soup, target_text="–°–ê-1-23"):
    """–ò—â–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
    groups = soup.find_all('div', class_='table-responsive')
    result = []

    for group in groups:
        if target_text.lower() in group.text.lower():
            table = group.find('table')
            if not table:
                continue

            rows = table.find_all('tr')
            for row in rows:
                cells = row.find_all('td')
                if len(cells) >= 4:
                    lesson = cells[0].text.strip()
                    replaced = cells[1].text.strip()
                    replacement = cells[2].text.strip()
                    added = cells[3].text.strip()

                    formatted_message = (
                        f"–ü–∞—Ä–∞: {lesson}\n"
                        f"–ß—Ç–æ –∑–∞–º–µ–Ω—è—é—Ç: {replaced}\n"
                        f"–ù–∞ —á—Ç–æ –∑–∞–º–µ–Ω—è—é—Ç: {replacement}\n"
                        f"–î–æ–±–∞–≤–ª–µ–Ω–∞: {added}\n"
                    )
                    result.append(formatted_message)

    return "\n".join(result) if result else "–í–æ–∑–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω –Ω–µ—Ç"


def parsing_dates(soup):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    date_tag = soup.find('h4')
    return date_tag.text.strip() if date_tag else "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"


# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ ---
def update_cache():
    global cache
    try:
        soup = fetch_page()
        cache["date"] = parsing_dates(soup)
        cache["replacements"] = get_replacements(soup)
        print("–ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")


# --- –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ ---
@bot.message_handler(commands=['start'])
def start(message):
    users.add(message.chat.id)
    save_users()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"))
    bot.send_message(
        message.chat.id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! "
             f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω—ë–º.",
        reply_markup=markup
    )


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏":
        bot.send_message(message.chat.id, f"{cache['date']}\n{cache['replacements']}")


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
last_sent_data = None


def send_notification():
    global last_sent_data
    if cache["replacements"] != last_sent_data:
        last_sent_data = cache["replacements"]
        for user_id in users:
            try:
                bot.send_message(user_id, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n{cache['replacements']}")
            except telebot.apihelper.ApiTelegramException:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


def safe_send():
    try:
        update_cache()
        send_notification()
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
task.add_job(safe_send, 'interval', minutes=20)
task.start()

# –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
update_cache()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    load_users()
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        bot.polling(none_stop=True, interval=1, timeout=30)
    except Exception as e:
        # –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        error_text = traceback.format_exc()
        logging.error("–û—à–∏–±–∫–∞ –≤ polling:\n%s", error_text)

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            bot.send_message(
                ADMIN_ID,
                f"‚ö†Ô∏è –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:\n\n<pre>{e}</pre>",
                parse_mode="HTML",
            )
        except Exception:
            # –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞:\n%s", traceback.format_exc())

        print(f"–û—à–∏–±–∫–∞ polling: {e}")
        print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. Docker –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.")
        time.sleep(5)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º